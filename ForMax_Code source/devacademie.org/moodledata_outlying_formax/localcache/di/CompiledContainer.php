<?php
/**
 * This class has been auto-generated by PHP-DI.
 */
class CompiledContainer extends DI\CompiledContainer{
    const METHOD_MAPPING = array (
  'core\\router\\route_loader_interface' => 'get1',
  'core\\router\\response_validator_interface' => 'get2',
  'core\\router\\request_validator_interface' => 'get3',
  'moodle_database' => 'get4',
  'core_string_manager' => 'get5',
  'core\\clock' => 'get6',
  'Psr\\Clock\\ClockInterface' => 'get7',
  'libphonenumber\\PhoneNumberUtil' => 'get8',
  'core\\router\\route_loader' => 'get9',
  'core\\router\\response_validator' => 'get10',
  'core\\router\\request_validator' => 'get11',
);

    protected function get1()
    {
        return $this->delegateContainer->get('core\\router\\route_loader');
    }

    protected function get2()
    {
        return $this->delegateContainer->get('core\\router\\response_validator');
    }

    protected function get3()
    {
        return $this->delegateContainer->get('core\\router\\request_validator');
    }

    protected function get4()
    {
        return $this->resolveFactory(static function(): \moodle_database {
                global $DB;

                return $DB;
            }, 'moodle_database');
    }

    protected function get5()
    {
        return $this->resolveFactory(static fn() => get_string_manager(), 'core_string_manager');
    }

    protected function get6()
    {
        return $this->resolveFactory(static function () {
                global $CFG;

                // Web requests to the Behat site can use a frozen clock if configured.
                if (defined('BEHAT_SITE_RUNNING') && !empty($CFG->behat_frozen_clock)) {
                    require_once($CFG->libdir . '/testing/classes/frozen_clock.php');
                    return new \frozen_clock((int)$CFG->behat_frozen_clock);
                }
                return new \core\system_clock();
            }, 'core\\clock');
    }

    protected function get7()
    {
        return $this->delegateContainer->get('core\\clock');
    }

    protected function get8()
    {
        return $this->resolveFactory(static fn() => \libphonenumber\PhoneNumberUtil::getInstance(), 'libphonenumber\\PhoneNumberUtil');
    }

    protected function get9()
    {
        $object = new core\router\route_loader();
        return $object;
    }

    protected function get10()
    {
        $object = new core\router\response_validator();
        return $object;
    }

    protected function get11()
    {
        $object = new core\router\request_validator();
        return $object;
    }

}
